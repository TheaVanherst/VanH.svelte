
// TODO: page checking and controlling

import { writable } from "svelte/store";

const
    scrollPos = writable(0),
    screenSize = writable(0),
    screenType = writable(0);

const
    bandWidths = [850, 600, 400]; //pre-determined bandwidth sizes

export { scrollPos, screenSize, bandWidths, screenType };

// TODO: Internal device management & specific code application instances.

let deviceType;

import Device from "svelte-device-info";

switch (true) {
    case Device.isPhone:  deviceType = 0;   break;
    case Device.isTablet: deviceType = 1;   break;
    default:              deviceType = 2;   break;}

export { deviceType };

// TODO: Internal directory and status management

const directory =   writable("/");
const pageLoaded = writable(false);
const transitioning = writable(false);

export { directory, pageLoaded, transitioning };

import { navigationDirectories } from "$lib/controllers/navigationDirectories.js";

// TODO: navigation direction controller

const
    urlStoreArr =   writable([""]), // handles the transition direction
    directionX =    writable(0), // handles the transition direction
    directionY =    writable(0); // handles the transition direction

export { urlStoreArr, directionX, directionY }

const nsfw = writable(false);
export { nsfw }

const
    directionProcessing = async (p,c,b = null, f = 0) => {
    // calculates which direction it should move horizontally
    let offsets = [0,0]; // debugging purposes
        // this is related to the server hoster, and is enforced by svelte.

    let pfr = p.split("/"), // "" is a fallback to prevent empty strings generated by
        cfr = c.split("/"); // the router controller. Don't ask.

    if (cfr.length ^ pfr.length) { //checks if arrays are different in length
        offsets[0] = pfr.length > cfr.length ? 1 : -1;} //forwards / backwards

    // calculates which direction it should move vertically

    let pyo = navigationDirectories.findIndex(e => e.path === "/" + cfr[1 + f]),
        cyo = navigationDirectories.findIndex(e => e.path === "/" + pfr[1 + f]);

    if (!(offsets[0] ^ 0) && (pyo ^ cyo)) { // only moves if x isn't
        offsets[1] = pyo > cyo ? 1 : -1;} // upwards / downwards

    // sets writable memory for fetching.
    directionY.set(offsets[0]);
    directionX.set(offsets[1]);

    // updates local url management.
    urlStoreArr.set(cfr);
    !b ? directory.set(c) : directory.set(b);
};

export { directionProcessing };

// TODO: USERINTERFACE CONTROLLERS

const
    navigationVisibility =  writable(true),
    socialMediaVisibility = writable(true);

export { navigationVisibility, socialMediaVisibility };