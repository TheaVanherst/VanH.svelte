
import { writable } from "svelte/store";

const
    scrollPos = writable(0),
    screenSize = writable(0),
    screenType = writable(0);

const bandWidths = [850, 600, 400]; //pre-determined bandwidth sizes

export { scrollPos, screenSize, bandWidths, screenType };

const loadingStatus =     writable(false);
const navigationStatus =  writable(true);
const directory =   writable(undefined);

export { loadingStatus, navigationStatus, directory };

import { navigationDirectories } from "$lib/navigationDirectories";

let urlStoreArr =   writable([""]); // handles the transition direction
let directionX =    writable(0); // handles the transition direction
let directionY =    writable(0); // handles the transition direction

export { urlStoreArr, directionX, directionY }

const directionProcessing = async (p,c,b = null) => {
    // calculates which direction it should move horizontally
    let offsets = [0,0]; // debugging purposes
        c = c + "/"; // this fixes an issue relating to the root always requiring a "/" at the end.
        // this is related to the server hoster, and is enforced by svelte.

    let pfr = p.split("/"), // "" is a fallback to prevent empty strings generated by
        cfr = c.split("/"); // the router controller. Don't ask.

    if (cfr.length ^ pfr.length) { //checks if arrays are different in length
        offsets[0] = pfr.length > cfr.length ? 1 : -1;} //forwards / backwards

    // calculates which direction it should move vertically
    let pyo = navigationDirectories.findIndex(e => e.path === "/" + cfr[1]),
        cyo = navigationDirectories.findIndex(e => e.path === "/" + pfr[1]);

    if (!(offsets[0] ^ 0) && (pyo ^ cyo)) { // only moves if x isn't
        offsets[1] = pyo > cyo ? 1 : -1;} // upwards / downwards

    // sets writable memory for fetching.
    directionY.set(offsets[0]);
    directionX.set(offsets[1]);

    // updates local url management.
    urlStoreArr.set(cfr);
    !b ? directory.set(c) : directory.set(b);
}

export { directionProcessing };